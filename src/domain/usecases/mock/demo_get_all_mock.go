// Code generated by MockGen. DO NOT EDIT.
// Source: demo_get_all.go
//
// Generated by this command:
//
//	mockgen -source demo_get_all.go -destination mock/demo_get_all_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/NeoArcanjo/testing-colibri/src/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIDemoGetAll is a mock of IDemoGetAll interface.
type MockIDemoGetAll struct {
	ctrl     *gomock.Controller
	recorder *MockIDemoGetAllMockRecorder
}

// MockIDemoGetAllMockRecorder is the mock recorder for MockIDemoGetAll.
type MockIDemoGetAllMockRecorder struct {
	mock *MockIDemoGetAll
}

// NewMockIDemoGetAll creates a new mock instance.
func NewMockIDemoGetAll(ctrl *gomock.Controller) *MockIDemoGetAll {
	mock := &MockIDemoGetAll{ctrl: ctrl}
	mock.recorder = &MockIDemoGetAllMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDemoGetAll) EXPECT() *MockIDemoGetAllMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIDemoGetAll) Execute(ctx context.Context) ([]models.Demo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].([]models.Demo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIDemoGetAllMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIDemoGetAll)(nil).Execute), ctx)
}
