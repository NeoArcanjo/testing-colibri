// Code generated by MockGen. DO NOT EDIT.
// Source: demo_get_by_id.go
//
// Generated by this command:
//
//	mockgen -source demo_get_by_id.go -destination mock/demo_get_by_id_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/NeoArcanjo/testing-colibri/src/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIDemoGetByID is a mock of IDemoGetByID interface.
type MockIDemoGetByID struct {
	ctrl     *gomock.Controller
	recorder *MockIDemoGetByIDMockRecorder
}

// MockIDemoGetByIDMockRecorder is the mock recorder for MockIDemoGetByID.
type MockIDemoGetByIDMockRecorder struct {
	mock *MockIDemoGetByID
}

// NewMockIDemoGetByID creates a new mock instance.
func NewMockIDemoGetByID(ctrl *gomock.Controller) *MockIDemoGetByID {
	mock := &MockIDemoGetByID{ctrl: ctrl}
	mock.recorder = &MockIDemoGetByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDemoGetByID) EXPECT() *MockIDemoGetByIDMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIDemoGetByID) Execute(arg0 context.Context, arg1 int) (*models.Demo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*models.Demo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIDemoGetByIDMockRecorder) Execute(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIDemoGetByID)(nil).Execute), arg0, arg1)
}
