// Code generated by MockGen. DO NOT EDIT.
// Source: demo_repository.go
//
// Generated by this command:
//
//	mockgen -source demo_repository.go -destination mock/demo_repository_mock.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/NeoArcanjo/testing-colibri/src/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDemoRepository is a mock of DemoRepository interface.
type MockDemoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDemoRepositoryMockRecorder
}

// MockDemoRepositoryMockRecorder is the mock recorder for MockDemoRepository.
type MockDemoRepositoryMockRecorder struct {
	mock *MockDemoRepository
}

// NewMockDemoRepository creates a new mock instance.
func NewMockDemoRepository(ctrl *gomock.Controller) *MockDemoRepository {
	mock := &MockDemoRepository{ctrl: ctrl}
	mock.recorder = &MockDemoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDemoRepository) EXPECT() *MockDemoRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockDemoRepository) FindAll(ctx context.Context) ([]models.Demo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]models.Demo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockDemoRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDemoRepository)(nil).FindAll), ctx)
}

// FindById mocks base method.
func (m *MockDemoRepository) FindById(ctx context.Context, id int) (*models.Demo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*models.Demo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockDemoRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockDemoRepository)(nil).FindById), ctx, id)
}
